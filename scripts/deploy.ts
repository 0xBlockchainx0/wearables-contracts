import { ethers } from "hardhat"

import * as MarketplaceConfig from 'marketplace-contracts/artifacts/contracts/marketplace/Marketplace.sol/Marketplace.json'
import * as ManaConfig from 'decentraland-mana/build/contracts/MANAToken.json'


const RARITIES = [
  { name: 'common', index: 0, value: 100000 },
  { name: 'uncommon', index: 1, value: 10000 },
  { name: 'rare', index: 2, value: 5000 },
  { name: 'epic', index: 3, value: 1000 },
  { name: 'legendary', index: 4, value: 100 },
  { name: 'mythic', index: 5, value: 10 },
  { name: 'unique', index: 6, value: 1 }
]
enum NETWORKS {
  'MUMBAI' = 'MUMBAI',
  'MATIC' = 'MATIC',
  'GOERLI' = 'GOERLI',
  'LOCALHOST' = 'LOCALHOST'
}

enum MANA {
  'MUMBAI' = '0x882Da5967c435eA5cC6b09150d55E8304B838f45',
  'MATIC' = '0xA1c57f48F0Deb89f569dFbE6E2B7f46D33606fD4',
  'GOERLI' = '0xe7fDae84ACaba2A5Ba817B6E6D8A2d415DBFEdbe',
  'LOCALHOST' = '0xe7fDae84ACaba2A5Ba817B6E6D8A2d415DBFEdbe',
}

const DEFAULT_RARITY_PRICE = '10000000000000000000' // 10 MANA

const OWNER_CUT_PER_MILLION = 10000


/**
 * @dev Steps:
 * Deploy the Collection implementation
 * Deploy the committee with the desired members. The owner will be the DAO bridge
 * Deploy the collection Manager. The owner will be the DAO bridge
 * Deploy the forwarder. Caller Is the collection manager.
 * Deploy the collection Factory. Owner is the forwarder.
 */
async function main() {
  const owner = process.env['OWNER']
  const collectionDeploymentsFeesCollector = process.env['OWNER']

  const account = ethers.provider.getSigner()
  const accountAddress = await account.getAddress()

  const network = NETWORKS[(process.env['NETWORK'] || 'LOCALHOST') as NETWORKS]
  if (!network) {
    throw ('Invalid error')
  }

  // Deploy the collection implementation
  const Collection = await ethers.getContractFactory("ERC721CollectionV2")
  const collectonImp = await Collection.deploy()

  // Deploy the rarities
  const Rarities = await ethers.getContractFactory("Rarities")
  const rarities = await Rarities.deploy(owner, (RARITIES).map((rarity) => [
    rarity.name,
    rarity.value,
    DEFAULT_RARITY_PRICE,
  ]))

  // Deploy the committee
  const Committee = await ethers.getContractFactory("Committee")
  const committee = await Committee.deploy(owner, process.env['COMMITTEE_MEMBERS']?.split(','))

  // Deploy the collection manager
  const CollectionManager = await ethers.getContractFactory("CollectionManager")
  const collectionManager = await CollectionManager.deploy(owner, MANA[network], committee.address, collectionDeploymentsFeesCollector, rarities.address)

  // Deploy the forwarder
  const Forwarder = await ethers.getContractFactory("Forwarder")
  const forwarder = await Forwarder.deploy(owner, collectionManager.address)

  // Deploy the forwarder
  const ERC721CollectionFactoryV2 = await ethers.getContractFactory("ERC721CollectionFactoryV2")
  const collectionFactoryV2 = await ERC721CollectionFactoryV2.deploy(forwarder.address, collectonImp.address)

  // Deploy collection marketplace
  let acceptedToken: string = MANA[network]

  if (network === 'LOCALHOST') {
    const Mana = new ethers.ContractFactory(ManaConfig.abi, '0x60606040526003805460a060020a61ffff02191690555b60038054600160a060020a03191633600160a060020a03161790555b5b610d12806100426000396000f300606060405236156101045763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461010957806306fdde0314610130578063095ea7b3146101bb57806318160ddd146101f157806323b872dd14610216578063313ce567146102525780633f4ba83a1461027b57806340c10f19146102a257806342966c68146102d85780635c975abb146102f057806370a08231146103175780637d64bcb4146103485780638456cb591461036f5780638da5cb5b1461039657806395d89b41146103c5578063a9059cbb14610450578063dd62ed3e14610486578063e30443bc146104bd578063f2fde38b146104e1575b600080fd5b341561011457600080fd5b61011c610502565b604051901515815260200160405180910390f35b341561013b57600080fd5b610143610524565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101805780820151818401525b602001610167565b50505050905090810190601f1680156101ad5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101c657600080fd5b61011c600160a060020a036004351660243561055b565b604051901515815260200160405180910390f35b34156101fc57600080fd5b610204610602565b60405190815260200160405180910390f35b341561022157600080fd5b61011c600160a060020a0360043581169060243516604435610608565b604051901515815260200160405180910390f35b341561025d57600080fd5b610265610638565b60405160ff909116815260200160405180910390f35b341561028657600080fd5b61011c61063d565b604051901515815260200160405180910390f35b34156102ad57600080fd5b61011c600160a060020a03600435166024356106c6565b604051901515815260200160405180910390f35b34156102e357600080fd5b6102ee6004356107a9565b005b34156102fb57600080fd5b61011c6107ce565b604051901515815260200160405180910390f35b341561032257600080fd5b610204600160a060020a03600435166107de565b60405190815260200160405180910390f35b341561035357600080fd5b61011c6107fd565b604051901515815260200160405180910390f35b341561037a57600080fd5b61011c610886565b604051901515815260200160405180910390f35b34156103a157600080fd5b6103a9610914565b604051600160a060020a03909116815260200160405180910390f35b34156103d057600080fd5b610143610923565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101805780820151818401525b602001610167565b50505050905090810190601f1680156101ad5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561045b57600080fd5b61011c600160a060020a036004351660243561095a565b604051901515815260200160405180910390f35b341561049157600080fd5b610204600160a060020a0360043581169060243516610988565b60405190815260200160405180910390f35b34156104c857600080fd5b6102ee600160a060020a03600435166024356109b5565b005b34156104ec57600080fd5b6102ee600160a060020a03600435166109e3565b005b6003547501000000000000000000000000000000000000000000900460ff1681565b60408051908101604052601181527f446563656e7472616c616e64204d414e41000000000000000000000000000000602082015281565b600081158061058d5750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b151561059857600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60005481565b60035460009060a060020a900460ff161561062257600080fd5b61062d848484610a3b565b90505b5b9392505050565b601281565b60035460009033600160a060020a0390811691161461065b57600080fd5b60035460a060020a900460ff16151561067357600080fd5b6003805474ff0000000000000000000000000000000000000000191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a15060015b5b5b90565b60035460009033600160a060020a039081169116146106e457600080fd5b6003547501000000000000000000000000000000000000000000900460ff161561070d57600080fd5b600054610720908363ffffffff610b5016565b6000908155600160a060020a03841681526001602052604090205461074b908363ffffffff610b5016565b600160a060020a0384166000818152600160205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a25060015b5b5b92915050565b60035460a060020a900460ff16156107c057600080fd5b6107c981610b6a565b5b5b50565b60035460a060020a900460ff1681565b600160a060020a0381166000908152600160205260409020545b919050565b60035460009033600160a060020a0390811691161461081b57600080fd5b6003805475ff000000000000000000000000000000000000000000191675010000000000000000000000000000000000000000001790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a15060015b5b90565b60035460009033600160a060020a039081169116146108a457600080fd5b60035460a060020a900460ff16156108bb57600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a15060015b5b5b90565b600354600160a060020a031681565b60408051908101604052600481527f4d414e4100000000000000000000000000000000000000000000000000000000602082015281565b60035460009060a060020a900460ff161561097457600080fd5b61097e8383610c0f565b90505b5b92915050565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b600160a060020a0382166000908152600160205260408120805490839055815483018190039091555b505050565b60035433600160a060020a039081169116146109fe57600080fd5b600160a060020a038116156107c9576003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b5b50565b600160a060020a038084166000908152600260209081526040808320338516845282528083205493861683526001909152812054909190610a82908463ffffffff610b5016565b600160a060020a038086166000908152600160205260408082209390935590871681522054610ab7908463ffffffff610ccf16565b600160a060020a038616600090815260016020526040902055610ae0818463ffffffff610ccf16565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3600191505b509392505050565b600082820183811015610b5f57fe5b8091505b5092915050565b6000808211610b7857600080fd5b5033600160a060020a038116600090815260016020526040902054610b9d9083610ccf565b600160a060020a03821660009081526001602052604081209190915554610bca908363ffffffff610ccf16565b600055600160a060020a0333167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a25b5050565b600160a060020a033316600090815260016020526040812054610c38908363ffffffff610ccf16565b600160a060020a033381166000908152600160205260408082209390935590851681522054610c6d908363ffffffff610b5016565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b92915050565b600082821115610cdb57fe5b508082035b929150505600a165627a7a72305820fbcd976e7efc9e6b4140d9836630f0a1ca6d282d3a4047092cc15caf7dfb172a0029', ethers.provider.getSigner())
    const mana = await Mana.deploy()
    acceptedToken = mana.address
  }

  const Marketplace = new ethers.ContractFactory(MarketplaceConfig.abi, MarketplaceConfig.bytecode, ethers.provider.getSigner())
  const marketplace = await Marketplace.deploy(
    acceptedToken,
    OWNER_CUT_PER_MILLION,
    owner,
  )

  // Deploy collection store
  const CollectionStore = await ethers.getContractFactory("CollectionStore")
  const collectionStore = await CollectionStore.deploy(owner, MANA[network], owner, OWNER_CUT_PER_MILLION)

  console.log(`Contract deployed by: ${accountAddress}`)
  console.log('Collection imp:', collectonImp.address)
  console.log('Rarities:', rarities.address)
  console.log('Committee:', committee.address)
  console.log('Collection Manager :', collectionManager.address)
  console.log('Forwarder:', forwarder.address)
  console.log('Collection Factory:', collectionFactoryV2.address)
  console.log('Collection Store:', collectionStore.address)
  console.log('NFT Marketplace:', marketplace.address)
}

main()
  .then(() => process.exit(0))
  .catch(error => {
    console.error(error)
    process.exit(1)
  })